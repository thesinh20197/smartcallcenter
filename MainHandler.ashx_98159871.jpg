// This JavaScript was automatically generated by
// Jayrock.JsonRpc.Web.JsonRpcProxyGenerator, Jayrock, Version=0.9.12915.0, Culture=neutral, PublicKeyToken=null
// on Sunday, July 5, 2020 at 10:33:52 PM (SE Asia Standard Time)

function MainHandler(url)
{
    var self = this;
    var m = ["getListDetailOrder","getListOrder","getListNews","login","logout","checkUsernameExist","registerMemberSimple","registerMember","editMember","resetPassword","forgetPassword","orderMyCart","addItemCart","updateCart","getListCart","removeAllItemCart","removeItemCart","getInitDataPage","closeAdvertisePreload","getListProductByCategoryID","insertContact","addCallBack","testAutoCall","system.listMethods","system.version","system.about"];
    var idems = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true];
    
    this[m[0]] = function /* getListDetailOrder */ (condition, begin, end, callback)
    {
        if (self.kwargs) return rpc(new Call(0, { condition: condition, begin: begin, end: end }, callback));
        return rpc(new Call(0, [ condition, begin, end ], callback));
    }
    
    this[m[1]] = function /* getListOrder */ (condition, begin, end, callback)
    {
        if (self.kwargs) return rpc(new Call(1, { condition: condition, begin: begin, end: end }, callback));
        return rpc(new Call(1, [ condition, begin, end ], callback));
    }
    
    this[m[2]] = function /* getListNews */ (callback)
    {
        if (self.kwargs) return rpc(new Call(2, { }, callback));
        return rpc(new Call(2, [ ], callback));
    }
    
    this[m[3]] = function /* login */ (userName, password, callback)
    {
        if (self.kwargs) return rpc(new Call(3, { userName: userName, password: password }, callback));
        return rpc(new Call(3, [ userName, password ], callback));
    }
    
    this[m[4]] = function /* logout */ (callback)
    {
        if (self.kwargs) return rpc(new Call(4, { }, callback));
        return rpc(new Call(4, [ ], callback));
    }
    
    this[m[5]] = function /* checkUsernameExist */ (username, callback)
    {
        if (self.kwargs) return rpc(new Call(5, { username: username }, callback));
        return rpc(new Call(5, [ username ], callback));
    }
    
    this[m[6]] = function /* registerMemberSimple */ (item, callback)
    {
        if (self.kwargs) return rpc(new Call(6, { item: item }, callback));
        return rpc(new Call(6, [ item ], callback));
    }
    
    this[m[7]] = function /* registerMember */ (item, wv, callback)
    {
        if (self.kwargs) return rpc(new Call(7, { item: item, wv: wv }, callback));
        return rpc(new Call(7, [ item, wv ], callback));
    }
    
    this[m[8]] = function /* editMember */ (item, oldPassword, callback)
    {
        if (self.kwargs) return rpc(new Call(8, { item: item, oldPassword: oldPassword }, callback));
        return rpc(new Call(8, [ item, oldPassword ], callback));
    }
    
    this[m[9]] = function /* resetPassword */ (MemberID, key, newPass, callback)
    {
        if (self.kwargs) return rpc(new Call(9, { MemberID: MemberID, key: key, newPass: newPass }, callback));
        return rpc(new Call(9, [ MemberID, key, newPass ], callback));
    }
    
    this[m[10]] = function /* forgetPassword */ (username, email, wordVerification, callback)
    {
        if (self.kwargs) return rpc(new Call(10, { username: username, email: email, wordVerification: wordVerification }, callback));
        return rpc(new Call(10, [ username, email, wordVerification ], callback));
    }
    
    this[m[11]] = function /* orderMyCart */ (itemOrd, callback)
    {
        if (self.kwargs) return rpc(new Call(11, { itemOrd: itemOrd }, callback));
        return rpc(new Call(11, [ itemOrd ], callback));
    }
    
    this[m[12]] = function /* addItemCart */ (newItemCart, callback)
    {
        if (self.kwargs) return rpc(new Call(12, { newItemCart: newItemCart }, callback));
        return rpc(new Call(12, [ newItemCart ], callback));
    }
    
    this[m[13]] = function /* updateCart */ (itemCart, callback)
    {
        if (self.kwargs) return rpc(new Call(13, { itemCart: itemCart }, callback));
        return rpc(new Call(13, [ itemCart ], callback));
    }
    
    this[m[14]] = function /* getListCart */ (callback)
    {
        if (self.kwargs) return rpc(new Call(14, { }, callback));
        return rpc(new Call(14, [ ], callback));
    }
    
    this[m[15]] = function /* removeAllItemCart */ (callback)
    {
        if (self.kwargs) return rpc(new Call(15, { }, callback));
        return rpc(new Call(15, [ ], callback));
    }
    
    this[m[16]] = function /* removeItemCart */ (productID, callback)
    {
        if (self.kwargs) return rpc(new Call(16, { productID: productID }, callback));
        return rpc(new Call(16, [ productID ], callback));
    }
    
    this[m[17]] = function /* getInitDataPage */ (callback)
    {
        if (self.kwargs) return rpc(new Call(17, { }, callback));
        return rpc(new Call(17, [ ], callback));
    }
    
    this[m[18]] = function /* closeAdvertisePreload */ (callback)
    {
        if (self.kwargs) return rpc(new Call(18, { }, callback));
        return rpc(new Call(18, [ ], callback));
    }
    
    this[m[19]] = function /* getListProductByCategoryID */ (categoryID, callback)
    {
        if (self.kwargs) return rpc(new Call(19, { categoryID: categoryID }, callback));
        return rpc(new Call(19, [ categoryID ], callback));
    }
    
    this[m[20]] = function /* insertContact */ (item, callback)
    {
        if (self.kwargs) return rpc(new Call(20, { item: item }, callback));
        return rpc(new Call(20, [ item ], callback));
    }
    
    this[m[21]] = function /* addCallBack */ (item, callback)
    {
        if (self.kwargs) return rpc(new Call(21, { item: item }, callback));
        return rpc(new Call(21, [ item ], callback));
    }
    
    this[m[22]] = function /* testAutoCall */ (item, callback)
    {
        if (self.kwargs) return rpc(new Call(22, { item: item }, callback));
        return rpc(new Call(22, [ item ], callback));
    }
    
    // Returns an array of method names implemented by this service.
    
    this[m[23]] = function /* system.listMethods */ (callback)
    {
        if (self.kwargs) return rpc(new Call(23, { }, callback));
        return rpc(new Call(23, [ ], callback));
    }
    
    // Returns the version server implementation using the major, minor, build and revision format.
    
    this[m[24]] = function /* system.version */ (callback)
    {
        if (self.kwargs) return rpc(new Call(24, { }, callback));
        return rpc(new Call(24, [ ], callback));
    }
    
    // Returns a summary about the server implementation for display purposes.
    
    this[m[25]] = function /* system.about */ (callback)
    {
        if (self.kwargs) return rpc(new Call(25, { }, callback));
        return rpc(new Call(25, [ ], callback));
    }
    
    var url = typeof(url) === 'string' ? url : 'http://smartcallcenter.vn/MainHandler.ashx';
    var nextId = 0;

    function Call(method, params, callback)
    {
        this.url = url;
        this.callback = callback;
        this.proxy = self;
        this.idempotent = idems[method];
        this.request = 
        { 
            id     : ++nextId, 
            method : m[method], 
            params : params 
        };
    }

    function rpc(call)
    {
        return self.channel != null && typeof(self.channel.rpc) === 'function' ?
            self.channel.rpc(call) : call;
    }

    this.kwargs = false;
    this.channel = new JayrockChannel();

    function JayrockChannel()
    {
        this.rpc = function(call)
        {
            var async = typeof(call.callback) === 'function';
            var xhr = newXHR();
            xhr.open('POST', call.url, async, this.httpUserName, this.httpPassword);
            xhr.setRequestHeader('Content-Type', this.contentType || 'application/json; charset=utf-8');
            xhr.setRequestHeader('X-JSON-RPC', call.request.method);
            if (async) xhr.onreadystatechange = function() { xhr_onreadystatechange(xhr, call.callback); }
            xhr.send(JSON.stringify(call.request));
            call.handler = xhr;
            if (async) return call;
            if (xhr.status != 200) throw new Error(xhr.status + ' ' + xhr.statusText);
            var response = JSON.parse(xhr.responseText);
            if (response.error != null) throw response.error;
            return response.result;
        }

        function xhr_onreadystatechange(sender, callback)
        {
            if (sender.readyState == /* complete */ 4)
            {
                try { 
                    sender.onreadystatechange = null; // Avoid IE7 leak (bug #12964)
                } 
                catch (e) { 
                    /* IE 6/Mobile throws for onreadystatechange = null */ 
                }

                var response = sender.status == 200 ? 
                    JSON.parse(sender.responseText) : {};
                
                callback(response, sender);
            }
        }

        function newXHR()
        {
            if (typeof(window) !== 'undefined' && window.XMLHttpRequest)
                return new XMLHttpRequest(); /* IE7, Safari 1.2, Mozilla 1.0/Firefox, and Netscape 7 */
            else
                return new ActiveXObject('Microsoft.XMLHTTP'); /* WSH and IE 5 to IE 6 */
        }
    }
}

MainHandler.rpcMethods = ["getListDetailOrder","getListOrder","getListNews","login","logout","checkUsernameExist","registerMemberSimple","registerMember","editMember","resetPassword","forgetPassword","orderMyCart","addItemCart","updateCart","getListCart","removeAllItemCart","removeItemCart","getInitDataPage","closeAdvertisePreload","getListProductByCategoryID","insertContact","addCallBack","testAutoCall","system.listMethods","system.version","system.about"];
